quarkus.application.ui-header={applicationName}

quarkus.log.console.filter=OpenTelemetryExporterFilter

quarkus.container-image.group=contestsubmission
quarkus.container-image.registry=ghcr.io

quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.telemetry=true
%prod.quarkus.datasource.username=${POSTGRES_USER}
%prod.quarkus.datasource.password=${POSTGRES_PASSWORD}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${POSTGRES_HOST:-postgres:5432}/${POSTGRES_DB:-quarkus}?loggerLevel=OFF

# fuck you quarkus for unnecessarily bloating my application in dev
quarkus.kubernetes-client.devservices.enabled=false
%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.config-maps=backend-config
%prod.quarkus.kubernetes.env.configmaps=postgres-config
%prod.quarkus.kubernetes-config.secrets=postgres-secret,backend-oidc-secret,backend-s3-secret,backend-mail-secret

# fix TERRIBLE decision of quarkus to add the version to the deployment selector...
# this makes ALL ARGOCD DEPLOYMENTS FAIL
# who came up with this shit? did they never try to apply a new manifest when a previous version was already deployed??
quarkus.kubernetes.add-version-to-label-selectors=false

# fix prometheus scraping
quarkus.http.host=0.0.0.0

# in prod, the validation MUST succeed because it is executed in a separate container before the app is started
%prod.quarkus.hibernate-orm.database.generation=validate
# in dev, validating DOES NOT FUCKING WORK when calling it w/ code. the quarkus experience
%dev.quarkus.hibernate-orm.database.generation=none
%dev.quarkus.hibernate-orm.sql-load-script=db/import-dev.sql
%dev.quarkus.flyway.clean-at-start=false
quarkus.flyway.migrate-at-start=true
# this task has been bothering me ever since it first appeared. BEGONE
quarkus.kubernetes.init-task-defaults.enabled=false

# split tokens into individual cookies (because they are too long)
quarkus.oidc.token-state-manager.split-tokens=true
# allows the user to just log in when running locally
%dev.quarkus.oidc.application-type=hybrid

# required because intellij is being stoopid again and doesn't load the remote openapi schema
quarkus.smallrye-openapi.store-schema-directory=build/openapi

# in dev, hardcoded dummy keys are used for convenience
# openssl req -x509 -newkey rsa:2048 -nodes -keyout src/main/resources/dev/priv.key -out src/main/resources/dev/pub.key
%dev.smallrye.jwt.sign.key.location=classpath:dev/priv.key
%prod.smallrye.jwt.sign.key.location=file:/secrets/priv.key
%dev.smallrye.jwt.verify.key.location=classpath:dev/pub.key
%prod.smallrye.jwt.verify.key.location=file:/secrets/pub.key

s3.bucket=contestsubmission
quarkus.s3.devservices.buckets=${s3.bucket}
quarkus.s3.devservices.container-properties.S3_SKIP_SIGNATURE_VALIDATION=0
# uncomment these properties to test the policies by utilizing minio (has to be configured manually)
# quarkus.s3.endpoint-override=http://localhost:9000
# quarkus.s3.aws.credentials.type=static
# quarkus.s3.aws.credentials.static-provider.access-key-id=quarkus
# quarkus.s3.aws.credentials.static-provider.secret-access-key=quarkus6969

%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=*

%dev.quarkus.mailer.from=contestsubmission@localhost (ContestSubmission)
%dev.websiteUrl=http://localhost:5173
