on: push

permissions:
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      application_version: ${{ steps.build-docker-image.outputs.application_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          # won't be used but is required by the action
          images: dummy
          tags: |
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{version}}
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            com.github.actions.run.id=${{ github.run_id }}
            com.github.actions.run.number=${{ github.run_number }}

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Build docker image
        id: build-docker-image
        run: |
          additional_tags="$(echo "$DOCKER_METADATA_OUTPUT_TAGS" | tr '\n' ',' | sed 's/dummy://g')"
          # i hate bash for these things
          labels=$(echo "$DOCKER_METADATA_OUTPUT_LABELS" | awk -F '=' '{print "-Dquarkus.container-image.labels.\"" $1 "\"=" $2 ""}')

          SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
          IFS=$'\n'      # Change IFS to newline char
          labels=($labels) # split the `names` string into an array by the same name
          IFS=$SAVEIFS   # Restore original IFS

          ./gradlew \
            -Dquarkus.container-image.group="contestsubmission" \
            -Dquarkus.container-image.name="contestsubmission-backend" \
            -Dquarkus.container-image.tag='${quarkus.application.version}-${{ github.run_number }}' \
            -Dquarkus.container-image.additional-tags="$additional_tags" \
            "${labels[@]}" \
            imageBuild

          echo "application_version=$(./gradlew properties -q | awk '/^version:/ {print $2}')" \
            >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push docker image
        run: docker push --all-tags ghcr.io/contestsubmission/contestsubmission-backend

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v3
        with:
          name: openapi-spec
          path: build/openapi

  openapi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: openapi-spec

      - name: Run OpenAPI generator
        uses: openapi-generators/openapitools-generator-action@v1
        with:
          generator: typescript-fetch
          generator-tag: v7.1.0
          command-args: --skip-validate-spec

      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: 'https://registry.npmjs.org'

      - name: Write package.json file
        run: |
          cat <<EOF > package.json
          {
            "name": "@contestsubmission/api-client",
            "version": "${{ needs.build.outputs.application_version }}-SNAPSHOT.${{ github.run_number }}",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/ContestSubmission/Backend.git"
            },
            "license": "MIT",
            "bugs": {
              "url": "https://github.com/ContestSubmission/Backend/issues"
            },
            "homepage": "https://github.com/ContestSubmission/Backend#readme"
          }
          EOF

      - name: Publish client to npm
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
