on: push

permissions:
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      application_version: ${{ steps.build-docker-image.outputs.application_version }}
      full_version: ${{ steps.build-docker-image.outputs.full_version }}
      branch: ${{ steps.get-branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          # won't be used but is required by the action
          images: dummy
          tags: |
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{version}}
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            com.github.actions.run.id=${{ github.run_id }}
            com.github.actions.run.number=${{ github.run_number }}

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Build docker image
        id: build-docker-image
        run: |
          additional_tags="$(echo "$DOCKER_METADATA_OUTPUT_TAGS" | tr '\n' ',' | sed 's/dummy://g')"
          # i hate bash for these things
          labels=$(echo "$DOCKER_METADATA_OUTPUT_LABELS" | awk -F '=' '{print "-Dquarkus.container-image.labels.\"" $1 "\"=" $2 ""}')

          SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
          IFS=$'\n'      # Change IFS to newline char
          labels=($labels) # split the `names` string into an array by the same name
          IFS=$SAVEIFS   # Restore original IFS

          # version like `2.6.1` - floating
          application_version="$(./gradlew properties -q | awk '/^version:/ {print $2}')"
          echo "application_version=$application_version" \
            >> "$GITHUB_OUTPUT"
          # unique version like `2.6.1-69` - immutable
          full_version="$application_version-${{github.run_number}}"
          echo "full_version=$full_version" \
            >> "$GITHUB_OUTPUT"

          ./gradlew \
            -Dquarkus.container-image.group="contestsubmission" \
            -Dquarkus.container-image.name="contestsubmission-backend" \
            -Dquarkus.container-image.tag="$full_version" \
            -Dquarkus.container-image.additional-tags="$additional_tags" \
            "${labels[@]}" \
            imageBuild

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push docker image
        run: docker push --all-tags ghcr.io/contestsubmission/contestsubmission-backend

      - name: Get Branch
        id: get-branch
        run: |
          # lstrip removes `refs/remotes/origin/`
          branch="$(git branch -r --contains "${{ github.ref }}" --format "%(refname:lstrip=3)")"
          echo "branch:'$branch'"
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v3
        with:
          name: openapi-spec
          path: build/openapi

      - name: Upload Kubernetes manifests
        uses: actions/upload-artifact@v3
        with:
          name: kubernetes-manifests
          path: build/kubernetes

  kubernetes-manifests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: kubernetes-manifests
          path: kubernetes/

      - name: Publish Kubernetes manifests to manifests repo
        uses: SIMULATAN/github-action-push-to-another-repository@short-origin-commit
        id: publish-kubernetes-manifests
        env:
          SSH_DEPLOY_KEY: ${{ secrets.KUBERNETES_MANIFESTS_DEPLOY_KEY }}
        with:
          clone-directory: KubernetesManifests
          source-directory: kubernetes/
          target-directory: backend
          destination-github-username: ContestSubmission
          destination-repository-name: KubernetesManifests
          user-name: 'GitHub Actions (Backend)'
          user-email: 'github-actions@github.com'
          commit-message: '[${{ needs.build.outputs.full_version }}] Update backend (ORIGIN_COMMIT_SHORT)'
          # if running on main branch, the target branch will be main, else, either the branch or tag name
          target-branch: ${{ needs.build.outputs.branch }}
          # since the target branch may be different if not running on main or tag
          create-target-branch-if-needed: true

      - name: Tag Kubernetes manifests repo commit
        env:
          SSH_DEPLOY_KEY: ${{ secrets.KUBERNETES_MANIFESTS_DEPLOY_KEY }}
        run: |
          cd $DESTINATION_CLONED_DIRECTORY
          mkdir --parents "$HOME/.ssh"
          DEPLOY_KEY_FILE="$HOME/.ssh/deploy_key"
          echo "${SSH_DEPLOY_KEY}" > "$DEPLOY_KEY_FILE"
          chmod 600 "$DEPLOY_KEY_FILE"

          SSH_KNOWN_HOSTS_FILE="$HOME/.ssh/known_hosts"
          ssh-keyscan -H "github.com" > "$SSH_KNOWN_HOSTS_FILE"

          export GIT_SSH_COMMAND="ssh -i '$DEPLOY_KEY_FILE' -o UserKnownHostsFile='$SSH_KNOWN_HOSTS_FILE'"

          echo "Tagging with ${{ needs.build.outputs.full_version }}"
          # immutable tag - in no circumstance (apart from reruns?) this is duplicated
          git tag "${{ needs.build.outputs.full_version }}"
          # floating tag - points to the latest build of the minor release
          if [ "${{github.event_name}}" = "tag" ]; then
            echo "Tagging with ${{ needs.build.outputs.application_version }}"
            git tag -f "${{ needs.build.outputs.application_version }}"
          fi
          git push --tags

  openapi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: build
    if: ${{ github.ref_name == github.event.repository.default_branch || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: openapi-spec

      - name: Run OpenAPI generator
        uses: openapi-generators/openapitools-generator-action@v1
        with:
          generator: typescript-fetch
          generator-tag: v7.1.0
          command-args: --skip-validate-spec

      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          registry-url: 'https://registry.npmjs.org'

      - name: Write package.json file
        run: |
          if [[ "$GITHUB_REF" != "refs/tags/"* ]] || [[ "${{ needs.build.outputs.branch }}" != "${{ github.event.repository.default_branch }}" ]]; then
            VERSION_SUFFIX="-SNAPSHOT.${{ github.run_number }}"
          fi
          VERSION="${{ needs.build.outputs.application_version }}$VERSION_SUFFIX"

          echo "Writing package.json for version $VERSION"
          cat <<EOF > package.json
          {
            "name": "@contestsubmission/api-client",
            "version": "$VERSION",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/ContestSubmission/Backend.git"
            },
            "license": "MIT",
            "bugs": {
              "url": "https://github.com/ContestSubmission/Backend/issues"
            },
            "homepage": "https://github.com/ContestSubmission/Backend#readme"
          }
          EOF

      - name: Publish client to npm
        run: |
          shopt -s dotglob
          mv typescript-fetch-client/* .
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
